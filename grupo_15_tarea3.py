# -*- coding: utf-8 -*-
"""GRUPO_15_Tarea3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1X4Gz70aVzwDYt1hfFPldSntP5BNql0kC

Pregunta 1
"""

import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

p=0.5    #probabilidad  de éxito
n=10     #número de intentos
k=7      #número de éxitos

probabilidad1= stats.binom.pmf(k, n, p)
print(probabilidad1)

"""Pregunta 2"""

import numpy as np
from scipy.stats import binom
import matplotlib.pyplot as plt

p=0.5    #probabilidad  de éxito
n=10     #número de intentos
k=7      #número de éxitos

probabilidad_acumulada1= binom.cdf(k, n, p)
print(probabilidad_acumulada1)

"""Pregunta 3"""

import numpy as np
from scipy.stats import binom
import matplotlib.pyplot as plt
x= np.arange(0,11)

probabilidad1=binom.pmf(x,10,0.5)

plt.bar(x, probabilidad1,color='skyblue')
plt.title('La distribución binomial completa para los 10 lanzamientos, mostrando la probabilidad de obtener desde 0 hasta 10 caras')
plt.xlabel('Caras')
plt.ylabel ('Probabilidades')
plt.show()

"""Pregunta  4

"""

import numpy as np
import scipy.stats as stats
import matplotlib.pyplot as plt

p=0.8    #probabilidad  de éxito
n=10     #número de intentos
k=7      #número de éxitos
probabilidad2= stats.binom.pmf(k, n, p)
print(probabilidad2)

probabilidad_acumulada2= binom.cdf(k, n, p)
print(probabilidad_acumulada2)

import numpy as np
from scipy.stats import binom
import matplotlib.pyplot as plt
x= np.arange(0,11)

probabilidad2=binom.pmf(x,10,0.8)
plt.bar(x, probabilidad2,color='skyblue')
plt.title('La distribución binomial completa para los 10 lanzamientos, mostrando la probabilidad de obtener desde 0 hasta 10 caras')
plt.xlabel('Caras')
plt.ylabel ('Probabilidades')
plt.show()

"""Conclusión: Se observa que al incrementar la probabilidad de éxito 𝑝 p de 0.5 a 0.8 en una serie de 10 lanzamientos de una moneda, la distribución de la probabilidad de obtener un número específico de éxitos (caras) se desplaza hacia la derecha. Esto significa que, cuando la probabilidad de obtener una cara es mayor, es más probable obtener un número más alto de caras en 10 lanzamientos.

Pregunta 5
"""

from scipy.stats import norm

mean = 0

std = 1

random_normal_data = norm.rvs(mean, std, size = 1000)
print(random_normal_data)

"""Pregunta 6"""

mean1 = sum(random_normal_data) / len(random_normal_data)
print(mean)

import statistics

stdv = statistics.stdev(random_normal_data)
std

median = statistics.median(random_normal_data)
median

import numpy as np
from scipy.stats import norm
mean = 0
std = 1
random_normal_data = norm.rvs(loc=mean, scale=std, size=1000)
media= np.mean(random_normal_data)
std= np.std(random_normal_data)
mediana= np.median(media)
print("Media:",media )
print("Desviación estándar:", std)
print("Mediana:", mediana)

"""Pregunta 7"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

plt.hist(random_normal_data)
plt.show()
ax.set_title('Datos aleatorios')
ax.set_xlabel('Valores')

plt.hist(random_normal_data, bins=20, density=True, color='forestgreen')
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, mean, std)
plt.plot(x, p, 'k', linewidth=2)
title = "Histograma de datos generados y curva de distribución normal "
plt.title(title)
plt.xlabel('Valor')
plt.ylabel('Densidad de Probabilidad')
plt.show()

"""Pregunta 8"""

import numpy as np
from scipy import stats

# Generar una muestra de datos con una distribución normal
np.random.seed(0)  # Para reproducibilidad
normal_data = np.random.normal(0, 1, 1000)

# Calcular la media y la desviación estándar
mean = np.mean(normal_data)
std_dev = np.std(normal_data)
print(f"Media: {mean:.2f}")
print(f"Desviación estándar: {std_dev:.2f}")

# Calcular la probabilidad de que un valor caiga dentro del rango -1 a 1
in_range = (normal_data >= -1) & (normal_data <= 1)
prob_in_range = np.mean(in_range)
print(f"Probabilidad de caer dentro de -1 a 1: {prob_in_range * 100:.2f}%")

probabilidad = norm.cdf(1, 0, 1) - norm.cdf(-1, 0, 1)
print(probabilidad)